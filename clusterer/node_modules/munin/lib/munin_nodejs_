#!/usr/bin/env node

// runs as a standalone script / munin plugin.
// (not loaded into node.js app)
// calls the stats server, gets json, turns into munin plugin output

// stats need to dump on load so they reset for next fetch?

// does stderr output go into graph? or just stdout (& then it's safe to output errors?)

// parse WHICH graph to load from the symlink... like other munin plugins
// this is a *wildcard* plugin. symlink determines which graph to load.
// symlink /etc/munin/plugins/munin_node-GRAPH (symlink to 'munin_node-' script) where GRAPH is the key of the graph to load.

var fs = require('fs'),
    path = require('path'),
    util = require('util');

// find the symlink path relative to actual path, to determine which graph to load.
// process.argv is probably ['node', '[path]' ] but can't assume that (?)
var realPath = fs.realpathSync(__filename),
    symlinkPath,
    argv = process.argv,
    mode,
    graphName;

for (var i=0; i<argv.length; i++) {
  // console.log(i, argv[i]);
  if (argv[i] === 'node') continue;
  
  try {
    if (symlinkPath == null && fs.realpathSync(fs.readlinkSync(argv[i])) === realPath) {
      symlinkPath = argv[i];
      // console.log('set path', symlinkPath);
      continue;
    }
  }
  catch(e) {   // anything that isn't a symlink
    // console.log('symlink error', e);
  }
  
  // next option (for indiv graph) or last option (for 'suggest' w/o symlink) is the request mode
  // ('config', 'suggest', others?)
  if (symlinkPath != null || i == (argv.length-1)) {
    mode = argv[i];
    // console.log('setting mode', mode);
    continue;
  }
}


// can this be done w/ pure http?
var request = require('request');

// @todo need a better way to pull in host.
// @todo also support sockets
var statsHost = 'http://' + process.env.statsHost + ':' + process.env.statsPort + process.env.statsPath;


// common request() runner
var requestGraph = function(relativeUrl, callback) {
  var url = statsHost + relativeUrl;
  // console.log(url);
  var req = request({
      url: url,
      json: true,
      timeout: 500
    },
    function requestCallback(error, response, data) {
      // console.log(data);
      if (error) return callback(error);
      else if (response.statusCode !== 200) return callback(new Error("Bad response code " + response.statusCode));
      callback(null, data);
    }
  );
  
  // [does this do anything, or does everything get passed to requestCallback?]
  req.on('error', function(error) {
    callback(error);
  });
};


// suggest mode: get the list of graphs this plugin can output
// should be able to run w/o a symlink
// @see http://munin-monitoring.org/wiki/ConcisePlugins#suggest
// this seems to depend on 'autoconf' which isn't implemented here yet, not sure if this is useful
if (mode === 'suggest') {
  // /graphs corresponds w/ statsHandler.getGraphKeys()
  requestGraph('/graphs', function requestCallback(error, graphs) {
    if (error) {
      console.error(error.message);
      process.exit(1);
    }
    try {
      for (var i in graphs) {
        process.stdout.write(graphs[i] + "\n");
      }
    }
    catch(error) {
      console.error('Unable to parse graphs list', error.message);
    }
  });
} //suggest


// individual graph
else {
  if (symlinkPath == null) {
    console.error('Unable to identify plugin symlink path');
    process.exit(1);
  }

  symlinkPath = path.basename(symlinkPath);
  realPath = path.basename(realPath);
  graphName = symlinkPath.replace(realPath, '');
  // console.log(graphName, mode);
  
  if (graphName == null || graphName === '') {
    console.error('Unable to identify graph name to lookup');
    process.exit(1);
  }
  
  // corresponds w/ statsHandler.dumpMuninStats(req.params.graphKey, reset)
  requestGraph('/' + graphName + (mode !== 'config' ? '?reset=1' : ''), function requestCallback (error, graph) {
    if (error) {
      console.error(error.message);
      process.exit(1);
    }

    try {
      var stats = graph.stats;
      delete graph.stats;    // rest is graph info

      // config mode
      if (mode === 'config') {
        // (does the order matter here?)
        for (var graphKey in graph) {
          process.stdout.write("graph_" + graphKey + " " + graph[graphKey] + "\n");
        }

        for (var statKey in stats) {
          if (typeof stats[statKey].config !== 'undefined') {
            for (var statConfig in stats[statKey].config) {
              process.stdout.write(statKey + "." + statConfig + " " + stats[statKey].config[statConfig] + "\n");
            }
          }
        }
      }

      // values mode
      else {
        for (var statKey in stats) {
          process.stdout.write(statKey + ".value " + stats[statKey].val + "\n");
        }
      }

    }
    catch(error) {
      console.error('Unable to parse stats for graph ' + graphName, error.message);
      process.exit(1);
    }
  });
} //individual graph
